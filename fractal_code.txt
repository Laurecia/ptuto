

clear all;
close all;

%project on individual minutes

% analysis of IM1, IM2, IM3 as well as IM4, IM5 and IM6

IMT=[45	32	43	40	35	47
61	65	56	55	56	59
73	60	59	55	64	52
61	61	53	45	47	60
65	63	66	66	65	60
63	65	59	56	59	60
61	60	58	60	59	60
59	61	64	53	65	61
58	60	60	59	57	59
60	53	86	55	65	59
61	59	60	59	60	60
49	54	52	50	52	49
75	62	55	56	60	63
71	63	54	64	65	66
45	46	48	42	48	51
89	59	40	59	60	57
45	60	55	61	64	55
63	60	63	62	63	60
53	76	58	57	67	58
92	60	71	84	70	88
66	64	63	65	64	64
85	75	57	60	62	59
40	52	52	58	61	61
78	74	73	69	67	71
84	62	55	72	70	65
66	57	54	68	66	69
61	55	60	59	62	61
60	60	60	68	60	62
43	53	57	60	60	62
58	58	60	55	54	61
61	58	63	55	58	62
59	61	64	60	61	61
80	72	64	58	59	57
64	61	58	62	60	61
62	60	64	67	61	60
60	59	60	58	60	59
60	61	56	60	60	58
63	58	57	59	61	63
56	68	57	54	63	64
59	62	60	60	71	62
84	79	65	48	50	55
70	64	60	63	62	59
51	69	61	43	56	56
61	57	64	59	60	61
80	55	52	54	55	53
26	25	32	23	26	23
75	69	62	51	48	50
55	56	60	61	58	56
58	60	60	60	60	57
61	60	61	60	59	59
100	120	90	80	80	70
67	58	54	51	59	59
67	58	61	38	60	60
69	59	72	66	64	61
76	78	67	67	64	68
105	106	56	100	47	105
60	56	58	58	43	60
52	58	66	58	67	54
84	69	52	49	53	57
71	61	58	63	59	58];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

% Kmax=5;
% N = length(IMT(:,1));
% serie=IMT(:,1);
% X = NaN(Kmax,Kmax,N);
% for k = 1:Kmax
%     for m = 1:k
%         limit = floor((N-m)/k);
%         j = 1;
%         for i = m:k:(m + (limit*k))
%             X(k,m,j) = serie(i);
%             j = j + 1;
%         end  
%     end
% end
% % Computing the length of each sub-serie:
% L = NaN(1, Kmax);
% for k = 1:Kmax
%     L_m = zeros(1,k);
%     for m = 1:k
%         R = (N - 1)/(floor((N - m)/k) * k);
%         aux = squeeze(X(k,m,logical(~isnan(X(k,m,:))))); %We get the sub-serie without the NaNs.
%         for i = 1:(length(aux) - 1)
%             L_m(m) = L_m(m) + abs(aux(i+1) - aux(i));
%         end
%         L_m(m) = (L_m(m) * R)/k;
%     end
%     L(k) = sum(L_m)/k;
% end
% % Finally, we compute the HFD:
% x = 1./(1:Kmax);
% aux = polyfit(log(x),log(L),1);
% HFD = aux(1);
% figure(1)
% plot(serie);
% figure(2),
% plot(log(x),log(L))
% display(HFD)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% success



% make 1000 data points from this wei equation
% Function for generating a parametric fractal test signal called Weierstrass
% Cosine Function (WCF). This function may be very useful to assess fractal
% dimension measures.
% 
% H=0.5; %FD should be 2-H.
% y=2;
% 
% for t=1:1000;
%     for i=1:10
%         W_apu(i,t)=y^(-i*H)*cos(2*3.1416*y.^(i-1)*t); %#ok<*SAGROW,AGROW>
%     end
%     W(t)=sum(W_apu(:,t)); %#ok<AGROW> %#ok<MSNU>
% end


W= IMT(:,6);

% W= data(:,4);

windowsize=20;%From how many datapoints the FD is calculated

for v=1:length(W)-windowsize;    
    w=v+windowsize;
    dW=W(v:w); %Takes a piece of the trace, w-v datapoints.
              % fractal sequences    
    kmax=5;  % user defined
    W1=zeros(1,kmax);
    W2=zeros(kmax,kmax);   
    N=length(dW);% of samples in data
    
     for k=1:kmax         
        for m =1:k     
            
            for i=1:fix((N-m)/k) 
                 W1(i)= abs(dW(m + i*k)-dW(m+(i-1)*k));  %#ok<AGROW>              
            end

            a=(N-1)/(fix((N-m)/k));
            
            W2(m,k)= (sum(W1*k)*a)/k; %#ok<AGROW>
            
        end             
     end
     
    W2;    
    % mean over all (1,k)
    
       for k =1:kmax        
         L(k)=sum(W2(:,k))/k; %#ok<AGROW> 
                 
       end      
       
    L;    
    k=1:kmax;         
    p=polyfit(log(k), log(L), 1);
    FD(N)=p(1); %#ok<AGROW>
    LM(v+(w-v)/2)=p(1);%#ok<AGROW> %#
            
end

    whos   
        
    figure(1),plot(LM), grid on;
    figure(2),plot(1:kmax, L), grid on;
    figure(3),plot(log(k),log(L)), grid on;
    
     
    P = [nanmean(LM(windowsize:length(W)-windowsize)) min(LM(windowsize:length(W)-windowsize)) max(LM(windowsize:length(W)-windowsize))];
    
    Q=P(3)-P(2);
    
    P;
    Q;     
        
        
    display(P);